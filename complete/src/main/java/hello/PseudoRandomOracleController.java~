/***********************************************************************
* FILENAME :        PseudoRandomOracleController.java             
*
* DESCRIPTION :
*       A Controller to Implement a (pseudo) random oracle for the IND-CPA ciphertext distinguishing game
*
* PUBLIC FUNCTIONS :
*       
*       
*
* NOTES : 
*       It is a standard approach to model modern ciphers as pseudo random functions (PRF).
*       A PRF is sematically secure if knowledge of a ciphertext does not reveal any information about 
*       about the key or the plaintext input to a **polynomial time** adversary (cf. contrast with "perfect 
*       secrecy"). 
*       An equivalent definition of sematic security is ciphertext indistinguibility under chosen plaintext attack
*       (IND-CPA). This definition is based on a distinguishing game where a polynomial time adversary chooses
*       two distinct messages, m_1 and m_2, and submits them to an encrypting oracle that implements the PRF.
*       The orale then randomly picks one of the two messages, encrypts them with the PRF, and returns this 
*       ciphertext to the adversay. The PRF is sematically secure if the likehood that the adversary can 
*       correctly guess the corresponding plaitext to the ci[phertext is no greater than 1/2 plus some 
*       "negligible" advantage
*
*        Implementation details: 
*        1) The chosen PRF is AES-128
*        2) Input plaintexts are each 16 bytes long which is equal to the AES block size
*        3) Since each input is sized to the AES block, we do not care about a specific mode of operation for AES
*        4) The two plaintexts are passed in to the rest endpoint through the following 
*           URL and parameter as a 64 character concatenated hex string
*        http://pseudorandomoracle.cfapps.io/oracle?plaintexts=02fa10    
*        5) The first 32 characters in the above paramater value correspond to the first 16 byte
*        plaintext messsage and the second 32 characters correspond to the second 16 byte plaitext message 
*        sent my the adversary 
*       
* 
* AUTHOR :    Rohit Khera        START DATE :    Dec. 6 2015
*
* CHANGES :
*  
* REF NO  VERSION DATE    WHO     DETAIL
* 
*
*/


package hello;

import java.util.concurrent.atomic.AtomicLong;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PseudoRandomOracleController {


    private static final String template= "the first plaintext is ";

    private final AtomicLong counter = new AtomicLong();

    @RequestMapping("/oracle")
    public PseudoRandomOracle  oracle(@RequestParam(value="plaintexts", defaultValue="none") String plaintexts) {


	/*
	StringBuffer buf=new StringBuffer();
	buf.append(template);
	buf.append(" ");
	buf.append(plaintexts.length());
        return new PseudoRandomOracle(counter.incrementAndGet(),
				      String.format(buf.toString(), plaintexts));


	*/
	StringBuffer buf = new StringBuffer();
	if(plaintexts.length()!=64) {
	    buf.append("Please provide a string of 64 hexadecimal characters representing two plaintexts of length 16 bytes. A valid sample invocation of this endpoint is  http://pseudorandomoracle.cfapps.io/oracle?plaintexts=70c10203f40501070d99aa0c00d0890fa0c13203f40501070d99aa0c00d089ff (you can change any one of these nibbles or bytes withtin this 64 char string). ");
	    buf.append("This service implements a random oracle for a ciphertext distinguishing game on PWS. ");
	    buf.append("The point of this game is to demonstrate ciphertext indistinguishiiblity of the AES-128-CTR pseudo random function (PRF) under chosen plaintext attack (i.e. IND-CPA security). This is equivalent to demonstrating semantic security of the AES-128-CTR PRF");  
            return new PseudoRandomOracle(counter.incrementAndGet(), buf.toString());
	}
	else {
	    PseudoRandomOracleHelper helper = new PseudoRandomOracleHelper(plaintexts);

	    buf.append("Welcome to Rohit's random oracle for a ciphertext distinguishing game on PWS. ");
	    buf.append("The point of this game is to demonstrate ciphertext indistinguishiiblity of the AES-128-CTR pseudo random function (PRF) under chosen plaintext attack (i.e. IND-CPA security). This is equivalent to demonstrating semantic security of the AES-128-CTR PRF. (you can change any one of these nibbles or bytes within this 64 char string). ");  
	    buf.append(" You sent me two plaintexts: ");
	    buf.append(helper.getPlaintext1());
	    buf.append(" and: ");
	    buf.append(helper.getPlaintext2());
	    buf.append(". I encrypted one of them to produce the ciphertext: ");
	    buf.append(helper.getCipherText());
	    buf.append(". Can you guess which plaintext I encrypted with probability significantly greater than 1/2? ");
	    return new PseudoRandomOracle(counter.incrementAndGet(), String.format(buf.toString()));
	}


    }
}
